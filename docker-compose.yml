name: apiplatform

services:

  krakend_ce:
    # The :watch image restarts the service automatically when the configuration files change.
    # Do not use this image in production, it's meant to speed up your testing and development.
    image: devopsfaith/krakend:watch
    volumes:
      - ./krakend:/etc/krakend
    env_file:
      - .env
    ports:
      - "1234:1234"
      - "8084:8084"
      - "8090:8090"
    command: ["run", "-d", "-c", "/etc/krakend/krakend.json"]

  postgres:
    image: postgres
    restart: always
    ports:
      - "5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - ./initdb.sh:/docker-entrypoint-initdb.d/initdb.sh

  otelcol:
    image: otel/opentelemetry-collector-contrib
    volumes:
      - ./opentelemetry/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP http receiver
    depends_on:
      - jaeger
      - prometheus

  jaeger:
    image: jaegertracing/all-in-one:1.52
    ports:
      - "16686:16686"
      - "4317"
      - "4318"
    environment:
      - LOG_LEVEL=debug
      - COLLECTOR_OTLP_ENABLED=true

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - "./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090

  loki: 
    image: grafana/loki:2.9.2
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki-config.yaml:/mnt/config/loki-config.yaml
    command: >-
      -config.file=/etc/loki/local-config.yaml
      -boltdb.shipper.compactor.ring.instance-addr=127.0.0.1
      -distributor.ring.instance-addr=127.0.0.1
      -frontend.instance-addr=127.0.0.1
      -index-gateway.ring.instance-addr=127.0.0.1
      -ingester.lifecycler.addr=127.0.0.1
      -query-scheduler.ring.instance-addr=127.0.0.1
      -ruler.ring.instance-addr=127.0.0.1

  promtail:
    image: grafana/promtail:2.9.2
    volumes:
      - promtail:/var/log
      - ./loki/promtail-config.yaml:/mnt/config/promtail-config.yaml
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "/var/lib/docker/containers:/var/lib/docker/containers"
    command: -config.file=/mnt/config/promtail-config.yaml
    depends_on:
      - loki

  grafana:
    image: grafana/grafana-enterprise
    restart: unless-stopped
    ports:
      - '9000:9000'
    environment:
      - GRAFANA_PORT=9000
    volumes:
      - "./grafana/datasources/all.yml:/etc/grafana/provisioning/datasources/all.yml"
      - "./grafana/grafana.ini:/etc/grafana/grafana.ini"
      - grafana:/var/lib/grafana

  renderer:
    image: grafana/grafana-image-renderer:latest
    ports:
      - '8081:8081'

  apiplatform:
    build: .
    restart: unless-stopped
    env_file:
      - .env
    environment:
        - SERVICE_NAME=apiplatformsvc
        - OTEL_EXPORTER_OTLP_ENDPOINT=otelcol:4318
    volume:
      - ./config.yaml:/config.yaml
    ports:
      - '8080'

volumes:
  promtail: {}
  grafana: {}
  prometheus: {}